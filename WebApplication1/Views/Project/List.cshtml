
@{
    ViewData["Title"] = "List";
}

@*<style>
	#divList {
		display: flex;
		flex-wrap: wrap;
		justify-content: flex-start; /* 靠左對齊，可根據需要更改 */
		align-items: flex-start; /* 靠上對齊，可根據需要更改 */
	}

	.playlist-item {
		/* 這裡可以添加卡片的樣式 */
		margin: 10px; /* 可根據需要調整邊距 */
	}
</style>*@
<style>
	/*粉色底線*/
	.ddd {
		border-bottom: 2px solid #fc0254;
	}

	/*粉色按鈕*/
	.btm {
		height: 60px;
		min-width: 167px;
		right: 0;
		top: 0;
		border: none;
		border-radius: 80px;
		color: #fff;
		font-size: 15px;
		background: #fc0254;
		float: right;
	}

	/*留空白用的*/
	.container.ddd {
		padding-top: 20px; /* 設置上邊距擴展的像素值 */
		padding-bottom: 20px; /* 設置下邊距擴展的像素值 */
	}

	.mix {
		position: relative;
		overflow: hidden;
		margin: 10px 0; /* 上下留白 */
	}

		.mix a {
			display: flex;
			flex-direction: column;
			height: 100%;
			text-decoration: none; /* 避免超連結的下劃線 */
		}

		.mix div {
			position: relative;
			background-color: white;
			color: black;
			padding: 5px;
			box-sizing: border-box;
			display: flex;
			flex-direction: column;
			justify-content: space-between;
			height: 100%;
		}

		.mix img {
			width: 100%;
			height: auto;
			display: block;
			border-radius: 10px; /* 添加圓角效果，根據需要調整 */
		}

		.mix span {
			background-color: white;
			color: black;
			padding: 5px;
			border: 1px solid #fc0254; /* 粉框 */
			border-radius: 5px; /* 添加圓角效果，根據需要調整 */
		}

		.mix h5, .mix p {
			text-align: center;
			margin: 5px 0; /* 上下留白 */
		}

		.mix p {
			max-width: 100%;
			overflow: hidden;
			text-overflow: ellipsis;
			white-space: nowrap;
			text-align: left;
			color: #888;
			margin: 0;
			display: block;
			height: 75%;
			font-size: 0.8em;
		}

	.ClassName {
		margin: 0px auto;
		margin-bottom: 5px;
		text-align: center;
		overflow: hidden;
		height: 25px;
		width: 90%;
		line-height: 25px;
		text-overflow: ellipsis;
		white-space: nowrap;
		display: block;
	}

	.genres {
		position: relative; /* 設置相對定位，讓內部元素可以使用絕對定位相對於這個容器 */
	}

		.genres div {
			position: relative; /* 設置相對定位，讓內部元素可以使用絕對定位相對於這個容器 */
		}

	.gss {
		position: absolute; /* 設置絕對定位 */
		bottom: 0; /* 距離底部的距離 */
		right: 0; /* 距離右邊的距離 */
		background-color: white;
		color: black;
		padding: 5px;
		/*border: 1px solid #fc0254;  粉框 */
	}

		.gss[data-course-type="offline"] {
			background-color: #FFCBB3; /* 實體課程的背景顏色 */
		}

		.gss[data-course-type="online"] {
			background-color: #A6FFFF; /* 線上課程的背景顏色 */
		}

	/* 調整其他樣式以避免重疊 */
	.genres h5, .genres p, .genres span {
		z-index: 1; /* 設置 z-index，確保文字和 span 在同一層次 */
	}

	.genres img {
		width: 100%; /* 設定寬度為 100% */
		height: 200px; /* 設定高度為 200 像素，可以根據需要調整 */
		object-fit: cover; /* 保持原始比例並填滿指定的大小 */
	}

	.favorite-button {
		position: absolute;
		top: 0;
		right: 0;
		width: 60px;
		height: 50px;
		background-size: cover; /* 調整圖片大小以填滿按鈕 */
		border: none;
		background-color: transparent; /* 移除按鈕背景色 */
		cursor: pointer;
	}

	.scroll-to-top-btn {
		position: fixed;
		bottom: 50px;
		right: 50px;
		background-color: #fc0254;
		color: #fff;
		border: none;
		border-radius: 5px;
		cursor: pointer;
		padding: 20px;
		display: none;
		z-index: 999; /* 將按鈕置於最上層 */
	}

		.scroll-to-top-btn i {
			font-size: 20px;
			position: fixed;
			z-index: 1000; /* 將 <i> 元素置於最上層 */
		}

</style>
<input type="hidden" id="loginId" value="@ViewBag.MemberId" />
<!-- Playlist section -->
<section class="playlist-section spad">
	<div class="container-fluid">
		<div class="row mb-3">
			<div class="row section-title col-lg-5" style="margin-bottom:0px;">
				<div class="col-5">
					<h2>找製作</h2>
				</div>
				<div class="col-7">
					<h5 id="resultCount" style="margin-top:30px;margin-bottom:0px;"></h5>
				</div>							
			</div>
			<div class="container col-lg-7">
				<div class="text-right">
					<select id="selectStyle" class="form-select mr-2"></select>
					<input type="text" id="txtKeyword" name="keywords" placeholder="關鍵字"class="mr-2"/>
					<button type="button" id="btnSearch" class="btn btn-secondary mr-2" >條件搜尋</button>	
					<button type="button" id="btnFavList" class="btn btn-info mr-2" onclick="CheckLoginAndNavigate()">專案追蹤</button>
					<button type="button" id="btnCreate" class="btn btn-info mr-2" onclick="CheckLoginAndNavigate()" style="background-color:#fc0254;">建立專案</button>
				</div>
			</div>
		</div>
		<div class="clearfix"></div>
		<div class="row">
			<div id="SkillList" class="row col-lg-2 col-md-6 col-sm-12 playlist-area">
				<!--Skill內容位置-->
			</div>
			<div id="divList" class="row col-lg-10 col-md-6 col-sm-12 playlist-area text-left">
                <!--List內容位置-->
            </div>
            <div id="pagination-container"></div>
		</div>
		
	</div>

	<div id="pageButtons" class="text-center">
		<!--分頁按鈕位置-->
	</div>
</section>
<!-- Playlist section end -->

<!-- Modal1 -->
<div class="modal fade" id="addModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"
	 aria-hidden="true">
	<div class="modal-dialog modal-lg" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="exampleModalLabel">建立專案 <span></span></h5>
				@*      <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
				<span aria-hidden="true">&times;</span>
				</button>*@
				@*<button type="button" class="btn btn-secondary" data-bs-dismiss="modal" aria-label="Close">取消</button>*@
			</div>
			<div class="modal-body">
				<form id="createForm">
					<div class="row">
						<div class="col-lg-6">
							<div class="form-group">
								<input type="hidden" id="loginId" name="fMemberId" value="@ViewBag.MemberId" />
								<div style="display: flex; justify-content: center; align-items: center; height: 230px;">
									<img id="imgPreview" src="~/img/project/1.jpg" style="height: 200px;" alt="">
								</div>
								<div style="display: flex; justify-content: center; align-items: center;">
									<input type="file" id="imgFile" name="formFilePhoto" required>
								</div>
							</div>
							<div class="form-group">
								<label for="fName">製作名稱</label>
								<input type="text" class="form-control" id="fName" name="fName" required>
							</div>
							<div class="form-group">
								<label for="FBudget">預算</label>
								<input type="text" class="form-control" id="fBudget" name="fBudget" required>
							</div>
							<div class="form-group">
								<label for="FBudget">風格</label>
								<select id="selectStyle2" class="form-select" name="fStyleId" required></select>
							</div>
							<div class="form-group">
								<label for="FBudget">製作期限</label>
								<input type="datetime-local" class="form-control" id="fEnddate" name="fEnddate" required>
							</div>

						</div>
						<div class="col-lg-6">
							<div class="form-group">
								<label for="FBudget">製作描述</label>
								<textarea class="form-control" id="fDescription" name="fDescription" style="height: 200px;" required></textarea>
							</div>
							<div class="form-group">
								<label for="FBudget">專長需求</label>
								<textarea class="form-control" id="fDescription2" name="fDescription2" style="height: 200px;" required></textarea>
							</div>
							<div class="form-group">
								<label for="FBudget">上傳Demo</label>
								<input type="file" id="demoFile" name="formFileDemo" required>
							</div>
						</div>
					</div>
					<div class="form-group">
					</div>
				</form>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal"><i class="bi bi-file-x-fill"></i> 關閉</button>
				<button type="button" class="btn btn-primary" id="buttonSend"><i class="bi bi-send-check-fill"></i> 送出 </button>
			</div>
		</div>
	</div>
</div>

<!-- Modal2 -->
<div class="modal fade" id="addModal2" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"
	 aria-hidden="true">
	<div class="modal-dialog modal-lg" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="exampleModalLabel">專案追蹤 <span></span></h5>
				@*      <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
				<span aria-hidden="true">&times;</span>
				</button>*@
				@*<button type="button" class="btn btn-secondary" data-bs-dismiss="modal" aria-label="Close">取消</button>*@
			</div>
			<div class="modal-body">
				<form id="createForm">
					<div class="row">
						<div class="col-lg-12">
							<table id="prjAcceptTable" class="table table-bordered">
								<tbody><!--資料位置--></tbody>
							</table>
							<table id="prjFavTable" class="table table-bordered">
								<tbody><!--資料位置--></tbody>
							</table>
						</div>						
					</div>
					<div class="form-group">
					</div>
				</form>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal"><i class="bi bi-file-x-fill"></i> 關閉</button>
			</div>
		</div>
	</div>
</div>

@section Scripts{
	<script>
		const selStyle = document.querySelector('#selectStyle');
		const selStyle2 = document.querySelector('#selectStyle2');
		const skillList = document.querySelector('#SkillList');
		const pageButtonsContainer = $('#pageButtons');
		const onePage = 12;

		//建立按鈕功能

		const loginID = $('#loginId').val();
		const btnCreate = document.getElementById('btnCreate');
		const btnFavList = document.getElementById('btnFavList');

		function btnCreatFuntion() {
			if (loginID != 0) {
				btnCreate.setAttribute('data-bs-toggle', 'modal');
				btnCreate.setAttribute('data-bs-target', '#addModal');
				btnFavList.setAttribute('data-bs-toggle', 'modal');
				btnFavList.setAttribute('data-bs-target', '#addModal2');
			}
			if (loginID == 0) {
			}
		}
		btnCreatFuntion();
		
		//圖片預覽
		var arrayBuffer;

		$("#imgFile").bind("change", function () {
			var file = this.files[0];
			var allowType = "image.*";
			if (file.type.match(allowType)) {
				//預覽
				var reader = new FileReader();
				reader.onload = function () {
					arrayBuffer = this.result;
					var blob = new Blob([arrayBuffer], {
						type: "image/jpeg"
					});
					var urlCreator = window.URL || window.webkitURL;
					var imageURL = urlCreator.createObjectURL(blob);
					$("#imgPreview").attr("src", imageURL);
				};
				reader.readAsArrayBuffer(this.files[0]);
			}
			else {
				alert("不支援的檔案類型");
			}
		});
		//送出創建資料
		$('#buttonSend').click(function () {
			if(validateForm()){
				const formData = new FormData(document.querySelector('#createForm'));
				fetch('@Url.Content("~/apiTProjects/Create")', {
					method: 'POST',
					body: formData
				})
				.then(response => {
					if (response.ok) {
						alert("創立成功");
						location.href = '@Url.Content("~/Project/List")';
					}
					else {
						alert("連線失敗");
					}
				})
			}
		})		

		//Style選擇器
		async function loadStyle() {
			const response = await fetch('@Url.Content("~/apiTStyle/List")');
			const data = await response.json();
			const defaultOption = '<option value="100">請選擇風格</option>';
			const styleOptions = data.map(s => `<option value="${s.fStyleId}">${s.fName}</option>`);
			styleOptions.unshift(defaultOption);
			selStyle.innerHTML = styleOptions.join("");
			selStyle2.innerHTML = styleOptions.join("");
		}
		loadStyle();
		//Skill按鈕
		async function loadSkill() {
			const response = await fetch('@Url.Content("~/apiTProjects/SkillsList")');
			const data = await response.json();
			const defaultBtn = '<div class="col-12 mb-3"><button value="100" class="btn btn-info mr-2 btnSkill activeSkill" style="width: 190px;height:40px;background-color: #fc0254;">所有技能</button></div>';
			const skillsBtn = data.map(s => `<div class="col-6 mb-3"><button value="${s.fSkillId}" class="btn btn-secondary mr-2 btnSkill" style="width: 90px;height: 40px">${s.fName}</button></div>`);
			skillsBtn.unshift(defaultBtn);
			skillList.innerHTML = skillsBtn.join("");
		}
		loadSkill();

		//Skill按鈕
		const btnSkill = document.getElementById('SkillList');
		// 添加點擊事件監聽器到 div 上
		btnSkill.addEventListener('click', function (event) {
			// 確保點擊的元素是按鈕
			if (event.target.tagName === 'BUTTON') {
				// 移除所有按鈕的 active 類
				const buttons = document.querySelectorAll('.btnSkill');
				
				// 遍歷所有按鈕，將它們的背景色還原
				buttons.forEach(button => {
					button.classList.remove('activeSkill');
					button.style.backgroundColor = ''; // 還原預設的背景色
					button.style.color = ''; // 還原文字顏色
				});
				event.target.classList.add('activeSkill');
				// 獲取按鈕的 value
				const buttonValue = event.target.value;
				

				// 修改 active 按鈕的背景顏色
				event.target.style.backgroundColor = '#fc0254';

				// 這裡可以進一步處理按鈕的 value，例如更新 div 的內容
				load(1);
				loadPage();
			}
		});

		//分頁按鈕
		async function loadPage() {
			const response = await fetch('@Url.Content("~/apiTProjects/List")');
			const data = await response.json();
			// 篩選條件
			const sId = $('#selectStyle').val();
			const keyword = $('#txtKeyword').val();
			const skillID = $('.activeSkill').val();

			// 根據所選風格篩選數據
			let filteredData = data;
			if (sId != 100) {
				filteredData = data.filter(item => item.fStyleId == sId);
			}
			//關鍵字篩選
			if (keyword != '') {
				filteredData = filteredData.filter(item => {
					// 在此添加關鍵字搜尋條件，例如在 fDescription 和 fName 中搜尋關鍵字
					return item.fDescription.includes(keyword) || item.fName.includes(keyword);
				});
			}

			//Skill條件
			if (skillID != 100) {
				filteredData = filteredData.filter(item => item.fSkillId == skillID);

			}

			const dataCount = filteredData.length;
			const pageCount = Math.ceil(dataCount / onePage);

			// 清空現有按鈕
			pageButtonsContainer.empty();
			for (let i = 1; i <= pageCount; i++) {
				let button = $(`<button class="btn btn-secondary mr-2">${i}</button>`);
				button.click(function () {
					load(i);
				});
				pageButtonsContainer.append(button);
			}
		}
		//載入資料
		function load(pageNumber) {
			const divList = $('#divList')
			const sId = $('#selectStyle').val();
			const keyword = $('#txtKeyword').val(); // 新增的關鍵字搜尋
			const skillID = $('.activeSkill').val()
			//divList.empty();

			$.getJSON('/apiTProjects/List', function (datas) {
				let filteredDatas = datas;
				
				//風格條件篩選
				if (sId != 100) {
					filteredDatas = datas.filter(item => {
						// 在此添加筛选条件
						return item.fStyleId == sId;
					});
				}
				//關鍵字篩選
				if (keyword != '') {
					filteredDatas = filteredDatas.filter(item => {
						// 在此添加關鍵字搜尋條件，例如在 fDescription 和 fName 中搜尋關鍵字
						return item.fDescription.includes(keyword) || item.fName.includes(keyword);
					});
				}
				//Skill條件
				if (skillID != 100) {
					filteredDatas = filteredDatas.filter(item => {
						return item.fSkillId == skillID;
					});
				}

				console.log(filteredDatas);
				dataCount = filteredDatas.length;
				$('#resultCount').text(`篩選結果 : ${dataCount}筆專案`);
				//獲得限定頁面資料
				const limitdatas = filteredDatas.slice((pageNumber - 1) * onePage, ((pageNumber - 1) * onePage) + onePage);
				const docFrag = $(document.createDocumentFragment());

				(async function () {
					for (const item of limitdatas) {
						await LoadMemberInfo(item.fMemberId);
						await LoadAppliNumber(item.fProjectId);
						console.log(item.fDescription); // 在這裡處理 memberName
						const descriSub = item.fDescription.length > 15 ? item.fDescription.substring(0, 15) + '...' : item.fDescription;
						const card = $(`<a class="mix col-lg-3 col-md-4 col-sm-6" href="/Project/Details/${item.fProjectId}" style="height:280px;">
								<div class="playlist-item">
									<img src="/img/project/${item.fThumbnailPath}" alt = "" >
									<h5>${item.fName}</h5>
									<p style="margin:0px">製作人 : ${memberName} / 應徵人數 : ${appliNum}</p>
									<p>${descriSub}</p>
								</div>
							</a>`);
						docFrag.append(card);
					}
					// 更新 divList
					divList.html(docFrag);
				})();
			});			
		}

		//第一次讀取分頁按鈕
		async function firstLoadPage() {
			const response = await fetch('@Url.Content("~/apiTProjects/List")');
			const data = await response.json();

			const dataCount = data.length;
			const pageCount = Math.ceil(dataCount / onePage);

			// 清空現有按鈕
			pageButtonsContainer.empty();
			for (let i = 1; i <= pageCount; i++) {
				let button = $(`<button class="btn btn-secondary mr-2">${i}</button>`);
				button.click(function () {
					load(i);
				});
				pageButtonsContainer.append(button);
			}
		}
		firstLoadPage();
		//第一次讀取
		function firstLoad(pageNumber) {
			const divList = $('#divList')
			//divList.empty();

			$.getJSON('/apiTProjects/List', function (datas) {
				//獲得限定頁面資料
				const limitdatas = datas.slice((pageNumber - 1) * onePage, ((pageNumber - 1) * onePage) + onePage);
				const docFrag = $(document.createDocumentFragment());

				(async function () {
					for (const item of limitdatas) {
						await LoadMemberInfo(item.fMemberId);
						await LoadAppliNumber(item.fProjectId);
						// 在這裡處理 memberName
						const descriSub = item.fDescription.length > 30 ? item.fDescription.substring(0, 30) + '...' : item.fDescription;
						const card = $(`<a class="mix col-lg-3 col-md-4 col-sm-6" href="/Project/Details/${item.fProjectId}" style="height:280px;">
								<div class="playlist-item">
									<img src="/img/project/${item.fThumbnailPath}" alt = "" >
									<h5>${item.fName}</h5>
									<p style="margin: 0;">製作人 : ${memberName} / 應徵人數 : ${appliNum}</p>
									<p>${descriSub}</p>
								</div>
							</a>`);
						docFrag.append(card);
					}

					// 更新 divList
					divList.html(docFrag);
				})();
			});
		}
		firstLoad(1);

		//讀取會員資料
		let memberName;
		function LoadMemberInfo(memberId){
			return new Promise(function (resolve) {
				$.getJSON(`/apiTProjects/QueryMemberById/${memberId}`, function (datas) {
					memberName = datas.fUsername;
					resolve();
				});
			});
		}
		//讀取應徵資料
		let appliNum;
		function LoadAppliNumber(projectId){
			return new Promise(function(resolve){
				$.get(`/apiTProjects/QueryApppliNumById/${projectId}`,function(data){
					appliNum = data;
					resolve();
				});
			});
		}
		
		//載入我的錄取清單
		function LoadPrjAcc() {
			const prjAcceptTable = $('#prjAcceptTable>tbody')

			$.getJSON(`/apiTProjects/GetPrjAcceptByID/${loginID}`, function (datas) {
				console.log(datas);
				const docFrag = $(document.createDocumentFragment())
				$.each(datas, function (index, item) {
					console.log(item);
					const nameSub = item.fName.length > 12 ? item.fName.substring(0, 12) + '...' : item.fName
					const descriSub = item.fDescription.length > 15 ? item.fDescription.substring(0, 15) + '...' : item.fDescription;
					const cell1 = $('<td></td>').html(`<h5>[已錄取]${nameSub}</h5>`);
					const cell2 = $('<td></td>').text(`技能 : [${item.fSkill.fName}]`);
					const cell3 = $('<td></td>').text(descriSub);
					const cell4 = $('<td></td>').html(`<a class="btn btn-primary btn-sm m-1" href="/Project/Details/${item.fProjectId}" target="_blank" onclick="ChangeAppliStatus(${item.fApplicationRecordId})">詳細</a>`);

					const row = $('<tr></tr>').append([cell1, cell2, cell3, cell4])
					docFrag.append(row)
				})
				prjAcceptTable.html(docFrag)
			})
		}
		LoadPrjAcc();

		//載入我的追蹤清單
		function LoadPrjFav() {
			const prjFavTable = $('#prjFavTable>tbody')

			$.getJSON(`/apiTProjects/GetPrjFavByID/${loginID}`, function (datas) {
				console.log(datas);
				const docFrag = $(document.createDocumentFragment())
				$.each(datas, function (index, item) {
					console.log(item);
					const nameSub = item.fName.length > 12 ? item.fName.substring(0, 12)+'...' : item.fName
					const descriSub = item.fDescription.length > 15 ? item.fDescription.substring(0, 15) + '...' : item.fDescription;
					const cell1 = $('<td></td>').html(`<h5>${nameSub}</h5>`);
					const cell2 = $('<td></td>').text(`技能 : [${item.fSkill.fName}]`);
					const cell3 = $('<td></td>').text(descriSub);
					const cell4 = $('<td></td>').html(`<a class="btn btn-primary btn-sm m-1" href="/Project/Details/${item.fProjectId}" target="_blank" onclick="ChangeAppliStatus(${item.fApplicationRecordId})">詳細</a>`);

					const row = $('<tr></tr>').append([cell1, cell2, cell3, cell4])
					docFrag.append(row)
				})
				prjFavTable.html(docFrag)
			})
		}
		LoadPrjFav();
		
		
		//搜尋按鈕
		$('#btnSearch').click(function () {		
			//讀取條件篩選後第一頁,重新讀取分頁頁碼
			load(1);
			loadPage();
			//$('#txtKeyword').val('');
		});
		//判斷是否登入
		async function CheckLoginAndNavigate() {
			const response = await fetch(`@Url.Content("~/apiHome/IsLogin")`);
			const isLogin = await response.json();

			if (isLogin) {
				// 如果已登錄，導航到 ClassController/Create
				//window.location.href = "@Url.Action("Create", "Project")";
			} else {
				// 如果未登錄，導航到 Home/Login
				window.location.href = "@Url.Action("Login", "Home")";
			}
		}
		function validateForm() {
            // 檢查必填項目是否都已填寫
            const requiredFields = document.querySelectorAll('[required]');
            let isValid = true;
            let isAlertShown = false; // 追踪警告是否已經顯示

            requiredFields.forEach(field => {
                if (!field.value.trim()) {
                    if (!isAlertShown) {
                        alert('請填寫所有項目');
                        isAlertShown = true; // 警告已經顯示
                    }
                    isValid = false;
                }
            });
            // 重置 isAlertShown，以便下次提交時再次顯示警告
            isAlertShown = false;
            return isValid;
        }
	</script>
}